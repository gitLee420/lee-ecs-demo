name: ci-cd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # for OIDC
      contents: read
    env:
      AWS_REGION: ap-southeast-1
      APP_NAME: lee
      ENV: dev
      ECR_REPO: lee-dev
      IMAGE_TAG: bootstrap

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::182836103705:role/github-deploy-lee-dev
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws
        run: |
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push image
        run: |
          IMAGE_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      # Render task definition from template and inject the built image URI
      - name: Render ECS task definition
        id: render-taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-taskdef.json
          container-name: ${{ env.APP_NAME }}
          image: ${{ env.IMAGE_URI }}

      # Deploy the rendered task definition to your cluster/service
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-taskdef.outputs.task-definition }}
          service: ${{ env.APP_NAME }}-${{ env.ENV }}
          cluster: ${{ env.APP_NAME }}-${{ env.ENV }}
          wait-for-service-stability: true
          force-new-deployment: true
