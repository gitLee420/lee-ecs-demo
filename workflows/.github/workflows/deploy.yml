name: ci-cd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write       # for OIDC
      contents: read
    env:
      AWS_REGION: ap-southeast-1
      APP_NAME: lee
      ENV: dev
      ECR_REPO: lee-dev
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/github-deploy-lee-dev
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        run: |
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Register new Task Definition revision
        run: |
          cat > taskdef.json <<'JSON'
          {
            "family": "${APP_NAME}-${ENV}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/${APP_NAME}-${ENV}-exec",
            "taskRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/${APP_NAME}-${ENV}-task",
            "containerDefinitions": [{
              "name": "${APP_NAME}",
              "image": "${IMAGE_URI}",
              "portMappings": [{ "containerPort": 80, "protocol": "tcp" }],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-region": "${AWS_REGION}",
                  "awslogs-group": "/ecs/${APP_NAME}-${ENV}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "essential": true
            }]
          }
          JSON
          # interpolate env vars
          python - <<'PY'
import json, os, sys
with open('taskdef.json') as f:
    data = f.read()
for k,v in os.environ.items():
    data = data.replace("${"+k+"}", v)
open('taskdef.json','w').write(data)
PY
          TASKDEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASKDEF_ARN=$TASKDEF_ARN" >> $GITHUB_ENV

      - name: Update Service
        run: |
          aws ecs update-service             --cluster ${APP_NAME}-${ENV}             --service ${APP_NAME}-${ENV}             --task-definition $TASKDEF_ARN             --desired-count 1             --force-new-deployment
